{% extends "multie/_layouts/index.twig" %}

{% import '_includes/forms' as forms %}

{% set fieldGroupId = craft.app.request.getSegment(3) %}

{% set crumbs = [
    { label: 'Multie'|t('plugin-handle'), url: url('multie/sections') },
    { label: 'Fields'|t('plugin-handle'), url: url('multie/fields') },
] %}

{% set fullPageForm = true %}

{% set fieldGroups = fieldGroups ?? null %}

{% set showHeader = true %}
{% set fullPageForm = true %}
{% set selectedSubnavItem = 'fields' %}
{% set sites = craft.app.getSites().getAllSites() %}
{% set title = "Multie Site Manager" %}

{% block actionButton %}


{#        <a href="#" class="submit btn add icon">{{ "New field"|t('app') }}</a>#}

{% endblock %}

{% block sidebar %}
    <nav>
        <ul id="groups">
            <li>
                <a {% if not fieldGroupId %}class="sel" {% endif %}href="{{ url('multie/fields') }}" data-id="0">
                    {{ "All Fields "|t('site') }}
                </a>
            </li>
            {% for group in fieldGroups %}
                <li>
                    <a class="{% if fieldGroupId == group.id %}sel{% endif %}" href="{{ url('multie/fields/'~ group.id) }}" data-id="{{ group.id }}">
                        {{ group.name|t('site') }}
                    </a>
                </li>
            {% endfor %}
        </ul>
    </nav>

    {#    <div class="buttons"> #}
    {#        <button type="button" id="newgroupbtn" class="btn add icon">{{ "New group"|t('app') }}</button> #}

    {#        {% if groupId is defined %} #}
    {#            <button type="button" id="groupsettingsbtn" class="btn settings icon menubtn" title="{{ 'Settings'|t('app') }}" aria-label="{{ 'Settings'|t('app') }}"></button> #}
    {#            <div class="menu"> #}
    {#                <ul> #}
    {#                    <li><a data-action="rename" role="button">{{ "Rename selected group"|t('app') }}</a></li> #}
    {#                    <li><a data-action="delete" role="button">{{ "Delete selected group"|t('app') }}</a></li> #}
    {#                </ul> #}
    {#            </div> #}
    {#        {% endif %} #}
    {#    </div> #}
{% endblock %}


{% block content %}

    {{ actionInput('multie/fields/update-all') }}
    {#    {{ redirectInput('settings/fields/{groupId}') }} #}
{#    {% if craft.app.getIsMultiSite() %}#}
{#        {% set translationMethods = field.supportedTranslationMethods %}#}
{#        {% if translationMethods|length > 1 %}#}
{#            <div id="translation-settings">#}
{#                {{ forms.selectField({#}
{#                    label: "Translation Method"|t('app'),#}
{#                    instructions: "How should this field’s values be translated?"|t('app'),#}
{#                    id: 'translation-method',#}
{#                    name: 'translationMethod',#}
{#                    options: [#}
{#                        'none' in translationMethods ? { value: 'none', label: "Not translatable"|t('app') },#}
{#                        'site' in translationMethods ? { value: 'site', label: "Translate for each site"|t('app') },#}
{#                        'siteGroup' in translationMethods ? { value: 'siteGroup', label: "Translate for each site group"|t('app') },#}
{#                        'language' in translationMethods ? { value: 'language', label: "Translate for each language"|t('app') },#}
{#                        'custom' in translationMethods ? { value: 'custom', label: "Custom…"|t('app') }#}
{#                    ]|filter,#}
{#                    value: field.translationMethod,#}
{#                    toggle: true,#}
{#                    targetPrefix: 'translation-method-'#}
{#                }) }}#}

{#                {% if 'custom' in translationMethods %}#}
{#                    {% tag 'div' with {#}
{#                        id: 'translation-method-custom',#}
{#                        class: field.translationMethod != 'custom' ? 'hidden' : null,#}
{#                    } %}#}
{#                        {{ forms.textField({#}
{#                            label: "Translation Key Format"|t('app'),#}
{#                            instructions: "Template that defines the field’s custom “translation key” format. Field values will be copied to all sites that produce the same key. For example, to make the field translatable based on the first two characters of the site handle, you could enter `{site.handle[:2]}`.",#}
{#                            id: 'translation-key-format',#}
{#                            class: 'code',#}
{#                            name: 'translationKeyFormat',#}
{#                            value: field.translationKeyFormat,#}
{#                            errors: field.getErrors('translationKeyFormat')#}
{#                        }) }}#}
{#                    {% endtag %}#}
{#                {% endif %}#}
{#            </div>#}
{#        {% endif %}#}

{#        {{ forms.selectField({#}
{#            label: 'Propagation Method'|t('app'),#}
{#            instructions: 'Which sites should blocks be saved to?'|t('app'),#}
{#            id: 'propagationMethod',#}
{#            name: 'propagationMethod',#}
{#            options: [#}
{#                { value: 'none', label: 'Only save blocks to the site they were created in'|t('app') },#}
{#                { value: 'siteGroup', label: 'Save blocks to other sites in the same site group'|t('app') },#}
{#                { value: 'language', label: 'Save blocks to other sites with the same language'|t('app') },#}
{#                { value: 'all', label: 'Save blocks to all sites the owner element is saved in'|t('app') },#}
{#                { value: 'custom', label: 'Custom…'|t('app') },#}
{#            ],#}

{#            toggle: true,#}
{#            targetPrefix: 'propagation-method-',#}
{#        }) }}#}

{#        {{ forms.checkboxField({#}
{#            label: 'Manage relations on a per-site basis'|t('app'),#}
{#            id: 'localize-relations',#}
{#            name: 'localizeRelations',#}
{#            checked: false#}
{#        }) }}#}

{#        {{ forms.submitButton([]) }}#}


{#    {% endif %}#}

    <div id="fields-vue-admin-table"></div>
{% endblock %}

{% js %}


var columns = [
    { name: '__slot:title', title: Craft.t('app', 'Name') },
    {
        name: 'searchable',
        titleClass: 'thin',
        callback: value => {
            if (!value) {
                return null;
            }
            return `<div class="badge-icon" data-icon="search" title="${Craft.t('app', 'This field’s values are used as search keywords.')}" aria-label="${Craft.t('app', 'This field’s values are used as search keywords.')}" role="img"></div>`;
        }
    },
{% if craft.app.isMultiSite %}
{
    name: 'translatable',
    titleClass: 'thin',
    callback: value => {
        if (!value) {
            return null;
        }
        return `<div class="badge-icon" data-icon="language" title="${value}" aria-label="${value}" role="img"></div>`;
    }
},
{% endif %}
{ name: '__slot:handle', title: Craft.t('app', 'Handle') },
{
    name: 'type',
    title: Craft.t('app', 'Type'),
    callback: function(value) {
        if (value.isMissing) {
            return '<span class="error">' + value.label + '</span>'
        }

        return value.label
    }
},
];

var actions = {{ actions | json_encode | raw }};

new Craft.VueAdminTable({

actions: actions,
columns: columns,
container: "#fields-vue-admin-table",
emptyMessage: Craft.t("plugin-handle", "No fields."),
reorderAction: "",
tableData: {{ tableData | json_encode | raw }},
allowMultipleSelections: true,
checkboxes: true

});


{% endjs %}



{#        {% tag 'div' with { #}
{#            id: 'propagation-method-custom', #}
{#            class: matrixField.propagationMethod != 'custom' ? 'hidden' : null, #}
{#        } %} #}
{#            {{ forms.textField({ #}
{#                label: 'Propagation Key Format'|t('app'), #}
{#                instructions: 'Template that defines the field’s custom “propagation key” format. Blocks will be saved to all sites that produce the same key.'|t('app'), #}
{#                id: 'propagation-key-format', #}
{#                class: 'code', #}
{#                name: 'propagationKeyFormat', #}
{#                value: matrixField.propagationKeyFormat, #}
{#                errors: matrixField.getErrors('propagationKeyFormat'), #}
{#            }) }} #}
{#        {% endtag %} #}





